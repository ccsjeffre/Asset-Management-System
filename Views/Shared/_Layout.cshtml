@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@{
    ViewData["Title"] = "Dashboard";
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet" />
    <!-- Bootstrap JS dependencies -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    var role = HttpContextAccessor.HttpContext?.Session.GetString("Role");
    var schoolId = HttpContextAccessor.HttpContext?.Session.GetString("SchoolID");
    var fullName = HttpContextAccessor.HttpContext?.Session.GetString("FullName");
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>   
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6; /* Light gray background */
        }
        /* Custom scrollbar for sidebar */
        .sidebar-scroll::-webkit-scrollbar {
            width: 8px;
        }

        .sidebar-scroll::-webkit-scrollbar-track {
            background: #1f2937; /* Darker track */
        }

        .sidebar-scroll::-webkit-scrollbar-thumb {
            background-color: #4b5563; /* Gray thumb */
            border-radius: 4px;
            border: 2px solid #1f2937;
        }

            .sidebar-scroll::-webkit-scrollbar-thumb:hover {
                background-color: #6b7280; /* Lighter gray on hover */
            }
    </style>
</head>
<body class="flex h-screen overflow-hidden">

    <!-- Mobile Menu Button (Hamburger) -->
    <div class="md:hidden fixed top-4 left-4 z-50 justify-content-end">
        <button id="menu-toggle" class="p-2 text-white bg-gray-800 rounded-md shadow-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
            </svg>
        </button>
    </div>

    <!-- Sidebar -->
    <aside id="sidebar" class="fixed inset-y-0 left-0 transform -translate-x-full md:translate-x-0 transition-transform duration-300 ease-in-out bg-gray-800 text-white w-64 flex flex-col shadow-lg z-40">

        <!-- Sidebar Header/Logo -->
        <div class="p-2 bg-gray-900 flex items-center justify-center">
            <h5 class="text-sm-center font-bold text-blue-400">ACT-DNTS Asset Management System</h5>
        </div>
        <!-- Navigation Links -->
        <nav class="flex-grow p-4 space-y-2 overflow-y-auto sidebar-scroll">
            <div class="relative">
                <a href="#" id="inventoryDropdownButton" class="flex items-center p-3 rounded-lg text-gray-300 hover:bg-gray-700 hover:text-white transition duration-200 ease-in-out no-underline text-sm">
                    INVENTORY
                    <svg id="inventoryDropdownArrow" class="w-4 h-4 ml-auto transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                </a>


                <div id="inventoryDropdownMenu"
                     class="absolute left-0 mt-1 w-48 bg-gray-800 rounded-md shadow-lg z-10 py-1
                    opacity-0 max-h-0 overflow-hidden
                    transition-all duration-300 ease-in-out transform scale-95 origin-top">
                    <a asp-controller="Hardwares" asp-action="Index" class="block px-4 py-2 no-underline text-sm text-gray-300 hover:bg-gray-700 hover:text-white">HARDWARES</a>
                    <a asp-controller="Borrowers" asp-action="InventoryStatus" class="block px-4 py-2 no-underline text-sm text-gray-300 hover:bg-gray-700 hover:text-white">INVENTORY STATUS</a>
                </div>
            </div>

            <div class="relative">
                <a href="#" id="borrowingDropdownButton"
                   class="flex items-center p-3 rounded-lg text-gray-200 hover:bg-gray-700 hover:text-white transition duration-200 ease-in-out no-underline text-sm">
                    BORROWING
                    <svg id="borrowingDropdownArrow" class="w-4 h-4 ml-auto transition-transform duration-200" fill="none"
                         stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                </a>

                <div id="borrowingDropdownMenu"
                     class="absolute left-0 mt-1 w-48 bg-gray-800 rounded-md shadow-lg z-10 py-1
                            opacity-0 max-h-0 overflow-hidden
                            transition-all duration-300 ease-in-out transform scale-95 origin-top">

                    <a asp-controller="Borrowers" asp-action="RequestHardware"
                       class="block px-4 py-2 no-underline text-sm text-gray-300 hover:bg-gray-700 hover:text-white">
                        BORROW HARDWARE
                    </a>

                    <a asp-controller="Borrowers" asp-action="MyRequests"
                       class="block px-4 py-2 no-underline text-sm text-gray-300 hover:bg-gray-700 hover:text-white">
                        BORROWER'S LIST
                    </a>

                    @if (role == "Admin")
                    {
                        <a asp-controller="Admin" asp-action="Approval"
                           class="block px-4 py-2 no-underline text-sm text-gray-300 hover:bg-gray-700 hover:text-white">
                            APPROVAL
                        </a>
                    }
                </div>
            </div>
            <div class="relative">
                <a asp-controller="Returns" asp-action="BorrowerRequestsList" id="returningDropdownButton" class="flex items-center p-3 rounded-lg text-gray-300 hover:bg-gray-700 hover:text-white transition duration-200 ease-in-out no-underline text-sm">
                    RETURNING
                </a>

            </div>

            <div class="relative">
                <a href="#" id="deploymentDropdownButton" class="flex items-center p-3 rounded-lg text-gray-300 hover:bg-gray-700 hover:text-white transition duration-200 ease-in-out no-underline text-sm">
                    DEPLOYMENT
                    <svg id="deploymentDropdownArrow" class="w-4 h-4 ml-auto transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                </a>


                <div id="deploymentDropdownMenu"
                     class="absolute left-0 mt-1 w-48 bg-gray-800 rounded-md shadow-lg z-10 py-1
                    opacity-0 max-h-0 overflow-hidden
                    transition-all duration-300 ease-in-out transform scale-95 origin-top">
                    <a asp-controller="Deployments" asp-action="RequestDeployment" class="block px-4 py-2 no-underline text-sm text-gray-300 hover:bg-gray-700 hover:text-white">DEPLOYMENT REQUEST</a>
					<a asp-controller="Deployments" asp-action="DeploymentRequestList" class="block px-4 py-2 no-underline text-sm text-gray-300 hover:bg-gray-700 hover:text-white">REQUEST LIST</a>
                    @if (role == "Admin")
                    {
                        <a asp-controller="Deployments" asp-action="DeploymentApproval"
                           class="block px-4 py-2 no-underline text-sm text-gray-300 hover:bg-gray-700 hover:text-white">
                            APPROVAL
                        </a>
                    }
                   
                </div>
            </div>

            <div class="relative">
                <a href="#" id="recordsDropdownButton" class="flex items-center p-3 rounded-lg text-gray-300 hover:bg-gray-700 hover:text-white transition duration-200 ease-in-out no-underline text-sm">
                    RECORDS
                    <svg id="recordsDropdownArrow" class="w-4 h-4 ml-auto transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                </a>


                <div id="recordsDropdownMenu"
                     class="absolute left-0 mt-1 w-48 bg-gray-800 rounded-md shadow-lg z-10 py-1
                    opacity-0 max-h-0 overflow-hidden
                    transition-all duration-300 ease-in-out transform scale-95 origin-top">
                    <a asp-controller="Deployments" asp-action="RequestDeployment" class="block px-4 py-2 no-underline text-sm text-gray-300 hover:bg-gray-700 hover:text-white">BORROWING</a>
                    <a asp-controller="Deployments" asp-action="DeploymentRequestList" class="block px-4 py-2 no-underline text-sm text-gray-300 hover:bg-gray-700 hover:text-white">INVENTORY</a>
                    <a asp-controller="Deployments" asp-action="DeploymentApproval" class="block px-4 py-2 no-underline text-sm text-gray-300 hover:bg-gray-700 hover:text-white">RETURNING</a>
                    <a asp-controller="Deployments" asp-action="DeploymentApproval" class="block px-4 py-2 no-underline text-sm text-gray-300 hover:bg-gray-700 hover:text-white">DEPLOYMENT</a>
                </div>
            </div>

            <script>
                document.addEventListener('DOMContentLoaded', function() {
                    // Function to handle a single dropdown
                    function setupDropdown(buttonId, menuId, arrowId) {
                        const button = document.getElementById(buttonId);
                        const menu = document.getElementById(menuId);
                        const arrow = document.getElementById(arrowId);

                        if (!button || !menu) return; // Exit if elements not found

                        function openDropdown() {
                            menu.classList.remove('opacity-0', 'max-h-0', 'scale-95');
                            menu.classList.add('opacity-100', 'max-h-screen', 'scale-100');
                            if (arrow) {
                                arrow.classList.add('rotate-180');
                            }
                        }

                        function closeDropdown() {
                            menu.classList.remove('opacity-100', 'max-h-screen', 'scale-100');
                            menu.classList.add('opacity-0', 'max-h-0', 'scale-95');
                            if (arrow) {
                                arrow.classList.remove('rotate-180');
                            }
                        }

                        button.addEventListener('click', function(event) {
                            event.preventDefault();
                            // Close all other dropdowns before opening this one
                            document.querySelectorAll('.sidebar-scroll [id$="DropdownMenu"]').forEach(otherMenu => {
                                if (otherMenu.id !== menuId && !otherMenu.classList.contains('opacity-0')) {
                                     // Find the associated button and arrow for the other menu to close it
                                     const otherButtonId = otherMenu.previousElementSibling.id; // Assumes structure
                                     const otherArrowId = otherButtonId.replace('Button', 'Arrow');
                                     const otherButton = document.getElementById(otherButtonId);
                                     const otherArrow = document.getElementById(otherArrowId);

                                     otherMenu.classList.remove('opacity-100', 'max-h-screen', 'scale-100');
                                     otherMenu.classList.add('opacity-0', 'max-h-0', 'scale-95');
                                     if (otherArrow) otherArrow.classList.remove('rotate-180');
                                }
                            });

                            if (menu.classList.contains('opacity-0')) {
                                openDropdown();
                            } else {
                                closeDropdown();
                            }
                        });

                        // Close dropdown when clicking outside
                        document.addEventListener('click', function(event) {
                            if (!button.contains(event.target) && !menu.contains(event.target)) {
                                closeDropdown();
                            }
                        });
                    }

                    // Setup each dropdown with its unique IDs
                    setupDropdown('inventoryDropdownButton', 'inventoryDropdownMenu', 'inventoryDropdownArrow');
                    setupDropdown('borrowingDropdownButton', 'borrowingDropdownMenu', 'borrowingDropdownArrow');
                    setupDropdown('returningDropdownButton', 'returningDropdownMenu', 'returningDropdownArrow');
                    setupDropdown('deploymentDropdownButton', 'deploymentDropdownMenu', 'deploymentDropdownArrow');
                    setupDropdown('recordsDropdownButton', 'recordsDropdownMenu', 'recordsDropdownArrow');

                    // Optional: Close any open dropdown if another main navigation item (not a dropdown) is clicked
                    // This assumes other non-dropdown nav items might exist in the sidebar-scroll
                    document.querySelectorAll('.sidebar-scroll > a:not([id$="DropdownButton"])').forEach(navItem => {
                        navItem.addEventListener('click', function() {
                            document.querySelectorAll('.sidebar-scroll [id$="DropdownMenu"]').forEach(menu => {
                                const buttonId = menu.previousElementSibling.id;
                                const arrowId = buttonId.replace('Button', 'Arrow');
                                const button = document.getElementById(buttonId);
                                const arrow = document.getElementById(arrowId);

                                menu.classList.remove('opacity-100', 'max-h-screen', 'scale-100');
                                menu.classList.add('opacity-0', 'max-h-0', 'scale-95');
                                if (arrow) arrow.classList.remove('rotate-180');
                            });
                        });
                    });
                });
            </script>
        </nav>
    </aside>

    <!-- Main Content Area -->
    <div class="flex-grow flex flex-col md:ml-64 transition-all duration-300 ease-in-out">
        <header class="bg-gradient p-4 flex justify-end items-center z-30">
            <div class="flex items-center space-x-4">              
                <!-- Notification Button -->
                <button class="text-white-500 hover:text-white-700 focus:outline-none">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                         xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                              d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4
                      0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595
                      1.405L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9"></path>
                    </svg>
                </button>

                <!-- User Dropdown -->
                <div class="dropdown">
                    <a class="nav-link dropdown-toggle" href="#" id="userDropdown" role="button"
                       data-bs-toggle="dropdown" aria-expanded="false">
                        <img src="https://cdn-icons-png.flaticon.com/512/812/812529.png"
                             alt="User Avatar Icon"
                             width="22"
                             height="22"
                             class="rounded-circle" />
                    </a>
                    <ul class="dropdown-menu dropdown-menu-end shadow animated--grow-in" aria-labelledby="userDropdown">
                        <li>
                            <a class="dropdown-item" href="#">
                                <i class="fas fa-user fa-sm fa-fw me-2 text-gray-400"></i> Profile
                            </a>
                        </li>
                        <li><hr class="dropdown-divider"></li>
                        <li>
                            <a class="dropdown-item" asp-controller="Account" asp-action="Login">
                                <i class="fas fa-sign-out-alt fa-sm fa-fw me-2 text-gray-400"></i> Logout
                            </a>
                        </li>
                    </ul>
                </div>
            </div>
        </header>

        <!-- Content Area -->
        <main role="main" class="mt-3">
            @RenderBody()
        </main>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const sidebar = document.getElementById('sidebar');
            const menuToggle = document.getElementById('menu-toggle');

            // Function to toggle sidebar visibility
            function toggleSidebar() {
                sidebar.classList.toggle('-translate-x-full');
            }

            // Event listener for the hamburger menu button
            if (menuToggle) {
                menuToggle.addEventListener('click', toggleSidebar);
            }

            // Close sidebar when clicking outside on mobile
            document.addEventListener('click', function(event) {
                const isClickInsideSidebar = sidebar.contains(event.target);
                const isClickOnMenuToggle = menuToggle.contains(event.target);
                const isSidebarOpen = !sidebar.classList.contains('-translate-x-full');

                if (!isClickInsideSidebar && !isClickOnMenuToggle && isSidebarOpen && window.innerWidth < 768) {
                    toggleSidebar();
                }
            });

            window.addEventListener('resize', function() {
                if (window.innerWidth >= 768) {
                    sidebar.classList.remove('-translate-x-full');
                } else {

                }
            });
        });
    </script>
    <!-- Keep only these -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    @RenderSection("Scripts", required: false)
</body>
</html>